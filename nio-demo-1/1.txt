packagecom.gxc.nio.demo1;
importorg.junit.Test;
importjava.nio.Buffer;
importjava.nio.ByteBuffer;
importjava.nio.charset.StandardCharsets;
/**
*测试Buffer.
*<p>
*position<=limit<=capacity
*
*@authorGongXincheng
*@date2019-12-0716:25
*/
publicclassTestBuffer{
@Test
publicvoidtest1(){
Stringstr="abcde";
ByteBufferbuffer=ByteBuffer.allocate(1024);
/**
*为Buffer分配空间(数组长度)
*/
System.out.println("///////////////allocate()////////////////");
//1024
System.out.println(buffer.capacity());
//1024
System.out.println(buffer.limit());
//0
System.out.println(buffer.position());

System.out.println("///////////////put()///////////////");
buffer.put(str.getBytes(StandardCharsets.UTF_8));
//1024
System.out.println(buffer.capacity());
//1024
System.out.println(buffer.limit());
//5
System.out.println(buffer.position());

/**
*flip()：将写模式变成读模式，limit=position，position=0
*/
System.out.println("///////////////flip()///////////////");
buffer.flip();
//1024
System.out.println(buffer.capacity());
//5
System.out.println(buffer.limit());
//0
System.out.println(buffer.position());


/**
*利用get()读取缓冲区的数据
*/
System.out.println("///////////////get()///////////////");
printBuffer(buffer,5);
//1024
System.out.println(buffer.capacity());
//5
System.out.println(buffer.limit());
//5
System.out.println(buffer.position());

/**
*rewind()可重复读数据：position=0
*/
System.out.println("///////////////rewind()///////////////");
buffer.rewind();
//1024
System.out.println(buffer.capacity());
//5
System.out.println(buffer.limit());
//0
System.out.println(buffer.position());
printBuffer(buffer,buffer.limit());

/**
*clear()清空缓冲区，但是缓冲区中的数据都还在，处于"被遗忘"状态：
*position=0,limit=capacity
*/
System.out.println("///////////////clear()///////////////");
buffer.clear();
//1024
System.out.println(buffer.capacity());
//1024
System.out.println(buffer.limit());
//0
System.out.println(buffer.position());
printBuffer(buffer,5);

}

/**
*读取Buffer中的数据
*
*@parambufferByteBuffer
*@parambyteSize初始化byte数组长度
*/
privatestaticvoidprintBuffer(ByteBufferbuffer,intbyteSize){
byte[]bytes=newbyte[byteSize];
buffer.get(bytes);
//abcde
System.out.println(newString(bytes,0,bytes.length));
}

/**
*用来测试mark标记
*/
@Test
publicvoidtest2(){
Stringstr="abcde";

ByteBufferbuffer=ByteBuffer.allocate(1024);
buffer.put(str.getBytes());

buffer.flip();

byte[]dst=newbyte[buffer.limit()];
buffer.get(dst,0,2);
//ab
System.out.println(newString(dst,0,2));

//1024
System.out.println(buffer.capacity());
//5
System.out.println(buffer.limit());
//2
System.out.println(buffer.position());

/**
*mark()：标记position的位置
*/
System.out.println("/////////////mark()/////////////");
buffer.mark();
buffer.get(dst,2,2);
//cd
System.out.println(newString(dst,2,2));
//4
System.out.println(buffer.position());

/**
*reset()：position恢复到mark的位置
*/
System.out.println("/////////////reset()/////////////");
buffer.reset();
//2
System.out.println(buffer.position());
if(buffer.hasRemaining()){
intremaining=buffer.remaining();
buffer.get(dst,2,remaining);
System.out.println(remaining);
System.out.println(newString(dst,2,3));
}
}

}
